#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;
    time-to-max-speed-ms = <100>;
    delay-ms = <0>;
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&soft_off { hold-time-ms = <2000>; };

/* ───────────────────────────── Behaviors ───────────────────────────── */

/ {
    behaviors {
        /* Bestehend: Shift/Caps Tap-Dance */

        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        /* Home-Row Mod (tap-preferred) – wie in deiner helper/dtsi */

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        /* Media tap-dances (aus deiner dtsi, falls genutzt) */

        tap_ct: tap_ct {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LCTRL>, <&kp LEFT_ALT>;
        };

        tap_mu: tap_mu {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp C_NEXT>, <&kp C_PREV>;
        };

        /* ── Umlaute als Tap-Dance (DE-Host, ohne Unicode) ──
       DE-Layout:  ä = '    Ä = Shift+'    → SQT / LS(SQT)
                   ö = ;    Ö = Shift+;    → SEMI / LS(SEMI)
                   ü = [    Ü = Shift+[    → LBKT / LS(LBKT)
                   ß = -    SS (Doppeltap) → MINUS / Macro "SS"   
                     = \ 
                   
                   
                   
                   
                   
                   
        */

        macro_SS: macro_SS {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(S) &kp LS(S)>;
        };

        deae: deae {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SQT>, <&kp LS(SQT)>;
        };

        deoe: deoe {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SEMI>, <&kp LS(SEMI)>;
        };

        deue: deue {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LBKT>, <&kp LS(LBKT)>;
        };

        desz: desz {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp MINUS>, <&macro_SS>;
        };

        /* ── Macros: =>, ->, :: ── */

        arrow_func: arrow_func {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            label = "ARROW_FUNC";
            bindings = <&kp LS(N0) &kp LS(NON_US_BACKSLASH)>;           /* "=>" */
        };

        arrow_thin: arrow_thin {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            label = "ARROW_THIN";
            bindings = <&kp MINUS &kp LS(NON_US_BACKSLASH)>;           /* "->" */
        };

        scope_sep: scope_sep {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            label = "SCOPE_SEP";
            bindings = <&kp LS(DOT) &kp LS(DOT)>; /* "::" */
        };

        /* ── DE-sichere ` und ~ ── */

        backtick_de: backtick_de {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            label = "BTICK_DE";
            bindings = <&kp LS(SQT) &kp SPACE>;      /* Shift+´ , dann Space */
        };

        tilde_de: tilde_de {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            label = "TILDE_DE";
            bindings = <&kp RA(PLUS)>;               /* AltGr + +  → ~ */
        };
    };

    /* ───────────────────────── Encoder / Combos ───────────────────────── */

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        /*softoff {
            bindings = <&soft_off>;
            key-positions = <1 15 29>;
        };*/
        /* (optional) deine frühere layer_3 Combo:
       combo_layer_3 {
         timeout-ms = <25>;
         bindings = <&tog 3>;
         key-positions = <0 1>;
         layers = <0xff>;
       };
    */
    };

    /* ───────────────────────────── Keymap ───────────────────────────── */

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        /* ================= BASE (Deutsch + ergonomisch) ================= */
        // ----------------------------------------------------------------------------------------------------
        // | TAB |  Q  |  W  |  F  |  P  |  B  |     |     |  G  |     |  J  |  L   |  U  |  Y  |  ;  |  Ä  |
        // | ESC |  A  |  R  |  S  |  T  |  G  |     |  G  |  G  |  G  |  M  |  N   |  E  |  I  |  O  |  Ö  |
        // |  ß  |  Z  |  X  |  C  |  D  |  V  | SPC |     |  G  |     |  K  |  H   |  ,  |  .  |  /  |  Ü  |
        //                   | GUI | LWR | SPC |     |     |     |     | ENT | RSE  | ALT |

        default_layer {
            display-name = "BASE";
            bindings = <
&kp TAB  &kp Q            &kp W            &kp F         &kp P         &kp B                                    &rgb_ug RGB_COLOR_HSB(0,0,100)                     &kp J        &kp L            &kp U         &kp Y             &kp LS(COMMA)     &deae
&kp ESC  &hrm LEFT_WIN A  &hrm LEFT_ALT R  &hrm LCTRL S  &hrm LSHIFT T &kp G                   &rgb_ug RGB_EFR  &rgb_ug RGB_TOG                   &rgb_ug RGB_EFF  &kp M        &hrm RSHIFT N    &hrm RCTRL E  &hrm RIGHT_ALT I  &hrm RIGHT_WIN O  &deoe
&desz    &kp Z            &kp X            &kp C         &kp D         &kp V      &kp SPACE                     &rgb_ug RGB_COLOR_HSB(120,98,36)                   &kp K        &kp H            &kp COMMA     &kp DOT           &kp LS(N7)        &deue
                                           &kp LSHIFT    &lt 1 SPACE   &lt 2 DEL                                                                                   &lt 4 ENTER  &lt 3 BACKSPACE  &kp RALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        /* ================= CODING (RAISE inhaltlich) ================= */
        // -------------------------------------------------------------------------------------------------------
        // |  [  |  {  |  (  |  )  |  }  |  ]  |     |     |     |  G  |     |  <  |  >  |  =  |  +  |  ~  |  `  |
        // |  !  |  -  |  *  |  /  |  \  |  |  |     |     |  G  |  G  |  G  |  &  |  ^  |  :  |  ;  |  ?  |  @  |
        // |  _  |  #  |  '  |  "  |  ,  |  .  | SPC |     |     |  G  |     |  $  |  %  |  => |  \  |  -> |  :: |
        //                   |     |     |     |     |     |     |     |     |     |     |     |

        lower_layer {
            display-name = "CODING";

            /* DE-Host-sichere Klammern/Operatoren + deine festen RGB/SPACE/MMV-Slots */

            bindings = <
&kp RA(N8)     &kp RA(N7)  &kp LS(N8)    &kp LS(N9)  &kp RA(N0)     &kp RA(N9)                                            &bt BT_NXT                    &kp NON_US_BACKSLASH  &kp LS(NON_US_BACKSLASH)  &kp LS(N0)   &kp PLUS       &tilde_de    &backtick_de
&kp LS(1)      &kp MINUS   &kp LS(RBKT)  &kp LS(N7)  &kp RA(MINUS)  &kp RA(NON_US_BACKSLASH)                &bt BT_SEL 0  &studio_unlock  &bt BT_SEL 1  &kp LS(N6)            &kp CARET                 &kp LS(DOT)  &kp LS(MINUS)  &kp QMARK    &kp RA(Q)
&kp LS(MINUS)  &kp HASH    &kp LS(HASH)  &kp LS(N2)  &kp COMMA      &kp DOT                   &kp C_MUTE                  &bt BT_PRV                    &kp LS(N4)            &kp LS(N5)                &arrow_func  &kp RA(MINUS)  &arrow_thin  &scope_sep
                                         &trans      &trans         &kp BSPC                                                                            &kp INS               &kp DEL                   &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        /* ================= NUMBER (Num/Operatoren + Macros) ================= */
        // -------------------------------------------------------------------------------------------------------
        // |     |     |     |     |     |     |     |     |     |  G  |     |     |  7  |  8  |  9  | BSPC |     |
        // |     |     |     |     |     |     |     |     |  G  |  G  |  G  |     |  4  |  5  |  6  | TAB  |     |
        // |     |     |     |     |     |     | SPC |     |     |  G  |     |  .  |  1  |  2  |  3  | RTAB |     |
        //                   |     |     |     |     |     |     |     |     |     |  0  |  0  |

        num_layer {
            display-name = "NUMBER";
            bindings = <
&trans  &trans  &kp LC(LEFT)  &kp LS(UP)    &kp LC(RIGHT)  &trans                                &mmv MOVE_UP                     &trans   &kp N7  &kp N8  &kp N9  &kp BACKSPACE  &trans
&trans  &trans  &kp LS(LEFT)  &kp LS(DOWN)  &kp LS(RIGHT)  &trans                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &trans   &kp N4  &kp N5  &kp N6  &kp TAB        &trans
&trans  &trans  &trans        &trans        &trans         &trans  &kp C_MUTE                    &mmv MOVE_DOWN                   &kp DOT  &kp N1  &kp N2  &kp N3  &kp LS(TAB)    &trans
                              &trans        &trans         &trans                                                                 &trans   &kp N0  &kp N0
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        /* ================= SYMBOL (Navigation/Editing) ================= */

        raise_layer {
            display-name = "SYMBOL";
            bindings = <
&kp ESC    &kp HOME  &kp UP    &kp END    &kp PG_UP     &kp CAPS                                 &mmv MOVE_UP                     &kp F1        &kp F2        &kp F3      &kp F4         &kp F5   &kp F6
&kp TAB    &kp LEFT  &kp DOWN  &kp RIGHT  &kp PG_DN     &kp INS                  &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp F7        &kp F8        &kp F9      &kp F10        &kp F11  &kp F12
&kp LCTRL  &kp LGUI  &kp LALT  &kp LSHFT  &kp LC(LEFT)  &kp LC(RIGHT)  &trans                    &mmv MOVE_DOWN                   &kp LS(LEFT)  &kp LS(DOWN)  &kp LS(UP)  &kp LS(RIGHT)  &kp DEL  &trans
                               &trans     &trans        &kp SPACE                                                                 &kp RET       &trans        &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        /* ================= SYS (Bluetooth / Output / RGB / Backlight) ================= */

        sys_layer {
            display-name = "SYS";
            bindings = <
&bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4     &bt BT_NXT                                     &mmv MOVE_UP                     &bt BT_PRV       &bt BT_CLR       &bt BT_CLR_ALL   &out OUT_USB     &out OUT_BLE  &out OUT_TOG
&rgb_ug RGB_TOG  &rgb_ug RGB_HUI  &rgb_ug RGB_HUD  &rgb_ug RGB_SAI  &rgb_ug RGB_SAD  &rgb_ug RGB_EFF                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &rgb_ug RGB_SPI  &rgb_ug RGB_SPD  &trans        &trans
&bl BL_TOG       &bl BL_INC       &bl BL_DEC       &bl BL_CYCLE     &bl BL_SET 50    &bl BL_OFF       &kp C_MUTE                    &mmv MOVE_DOWN                   &bootloader      &studio_unlock   &trans           &trans           &trans        &trans
                                                   &trans           &trans           &trans                                                                          &trans           &trans           &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};
