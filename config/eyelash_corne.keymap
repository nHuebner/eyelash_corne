#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/eyelash42.h"


#define _BT_SEL_KEYS_                                                        \
      &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR

#define DEF 0   // Base
#define NAV 1   // Coding
#define FN 2   // Number
#define NUM 3   // Symbol
#define SYS 4   // Sys
#define MOUSE 5   // Mouse

#define XXX &none
#define ___ &trans

/* Global defaults */

#define QUICK_TAP_MS 175

&sk {
  release-after-ms = <900>;
  quick-release;
};

&sl { // Allow sticky mods to chord across sticky layers.
  ignore-modifiers;
};

&lt {
  flavor = "balanced";
  tapping-term-ms = <200>;
  quick-tap-ms = <QUICK_TAP_MS>;
};

/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LT6 LM0 LM1 LM2 LM3 LM4 LM5 LM6 LB0 LB1 LB2 LB3 LB4 LB5 LB6 LEC
#define KEYS_R JS0 RT0 RT1 RT2 RT3 RT4 RT5 RT6 JS1 JS2 JS3 RM0 RM1 RM2 RM3 RM4 RM5 RM6 JS4 RB0 RB1 RB2 RB3 RB4 RB5 RB6
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <280>; quick-tap-ms = <QUICK_TAP_MS>;         \
               require-prior-idle-ms = <150>; hold-trigger-on-release;         \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS) // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS) // Right-hand HRMs.

// Hack: Make HRM combos tap-only (cf, ZMK issue #544).
#define ZMK_COMBO_8(NAME, TAP, POS, LAYERS, COMBO_MS, IDLE_MS, HOLD, SIDE)     \
  MAKE_HRM(hm_combo_##NAME, &kp, TAP, SIDE THUMBS)                             \
  ZMK_COMBO_6(NAME, &hm_combo_##NAME HOLD 0, POS, LAYERS, COMBO_MS, IDLE_MS)

/* Combos, leader key sequences, mouse emulation */

#include "combos.dtsi" // Must be sourced after HRM-combo hack.
#include "mouse.dtsi"

/* Nav cluster */

// Trigger tap-action on all interrupts.
#define MT_CORE                                                                \
  flavor = "tap-preferred";                                                    \
  tapping-term-ms = <220>;                                                     \
  quick-tap-ms = <220>;                                                        \
  hold-trigger-key-positions = <0>;

&mt { MT_CORE };

ZMK_HOLD_TAP(mt_home, bindings = <&masked_home>, <&kp>; MT_CORE)
ZMK_HOLD_TAP(mt_end, bindings = <&masked_end>, <&kp>; MT_CORE)


#define NAV_LEFT  &mt_home 0   LEFT  // Tap: left  | Long-tap: start of line.
#define NAV_RIGHT &mt_end 0    RIGHT // Tap: right | Long-tap: end   of line.
#define NAV_UP    &mt LC(HOME) UP    // Tap: up    | Long-tap: start of doc.
#define NAV_DOWN  &mt LC(END)  DOWN  // Tap: down  | Long-tap: end   of doc.
#define NAV_BSPC  &mt LC(BSPC) BSPC  // Tap: bspc  | Long-tap: delete word bwd.
#define NAV_DEL   &mt LC(DEL)  DEL   // Tap: del   | Long-tap: delete word fwd.

#define R_TOG &rgb_ug RGB_TOG
#define R_HUE_I &rgb_ug RGB_HUI
#define R_HUE_D &rgb_ug RGB_HUD  
#define R_SAT_I &rgb_ug RGB_SAI  
#define R_SAT_D &rgb_ug RGB_SAD  
#define R_EF_F &rgb_ug RGB_EFF
#define R_EF_P &rgb_ug RGB_EFR
#define R_BR_I &rgb_ug RGB_BRI 
#define R_BR_D &rgb_ug RGB_BRD 
#define R_SPE_I &rgb_ug RGB_SPI 
#define R_SPE_D &rgb_ug RGB_SPD
#define R_COL_W &rgb_ug RGB_COLOR_HSB(0,0,100)
#define R_COL_G &rgb_ug RGB_COLOR_HSB(120,100,100)

#define WIN_PC &bt BT_SEL 0
#define MAC_WORK &bt BT_SEL 1
#define K_BT_N &bt BT_NXT
#define K_BT_P &bt BT_PRV

// Mask CTRL on left/right hold to avoid accidental jumps to start/end of doc.
#define MASK_MODS(NAME, MODS, BINDING)                                         \
  ZMK_MOD_MORPH(NAME, bindings = <BINDING>, <BINDING>; mods = <MODS>;)

MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
MASK_MODS(masked_end,  (MOD_LCTL), &kp END)

/* Magic-shift & auto-layers */

// Tap: repeat after alpha, else sticky-shift |
// Shift + tap/ double-tap: caps-word | Hold: shift.
#define MAGIC_SHIFT &magic_shift LSHFT 0
ZMK_HOLD_TAP(magic_shift, bindings = <&kp>, <&magic_shift_tap>;
             flavor = "balanced"; tapping-term-ms = <200>;
             quick-tap-ms = <QUICK_TAP_MS>;)
ZMK_MOD_MORPH(magic_shift_tap, bindings = <&shift_repeat>, <&caps_word>;
              mods = <(MOD_LSFT)>;)
ZMK_ADAPTIVE_KEY(
    shift_repeat, bindings = <&sk LSHFT>;
    repeat {
      trigger-keys = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z>;
      bindings = <&key_repeat>;
      max-prior-idle-ms = <1200>;
      strict-modifiers;
    };)
&caps_word { // Mods deactivate caps-word, requires PR #1451. [TODO: rebase]
  /delete-property/ ignore-modifiers;
};

// Tap: num-word | double-tap: sticky num-layer | Hold: num-layer.
#define SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(smart_num, bindings = <&mo>, <&num_dance>; flavor = "balanced";
             tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)
ZMK_TAP_DANCE(num_dance, bindings = <&num_word NUM>, <&sl NUM>;
              tapping-term-ms = <200>;)

// Smart-mouse, requires tri-state module.
ZMK_TRI_STATE(
    smart_mouse, bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>;
    ignored-key-positions =
        <LT1 LT2 LH0 LH1 LH2 RT1 RT2 RT3 RM0 RM1 RM2 RM3 RM4 RB1 RB2 RB3 RH0 RH1 RH2>;
    ignored-layers = <MOUSE NAV FN>;)

// Alt+Tab swapper, requires tri-state module.
ZMK_TRI_STATE(swapper, bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
              ignored-key-positions = <LT2 RT2 RM1 RM2 RM3>;)

// Define mod-morph with a *single* mod trigger for less repetition.
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2)                            \
  ZMK_MOD_MORPH(NAME, mods = <(MOD_L##MOD | MOD_R##MOD)>;                      \
                bindings = <BINDING1>, <BINDING2>;)

// Tap: comma | Shift + tap: semicolon | Ctrl + shift + tap: <.
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
SIMPLE_MORPH(comma_inner_morph, CTL, &kp LS(COMMA), &kp NUBS)

// Tap: dot | Shift + tap: colon | Ctrl + shift + tap: >.
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &dot_inner_morph)
SIMPLE_MORPH(dot_inner_morph, CTL, &kp LS(DOT), &kp LS(NUBS))

// Tap: qmark | Shift + tap: excl.
SIMPLE_MORPH(qexcl, SFT, &kp LS(MINUS), &kp LS(N1))

// Tap: left/right parenthesis | Shft + tap: less-than/greater-than.
SIMPLE_MORPH(lpar_lt, SFT, &kp LPAR, &kp LT)
SIMPLE_MORPH(rpar_gt, SFT, &kp RPAR, &kp GT)

// Tap: space | Shift + tap: dot -> space -> sticky shift | Hold: nav layer.
ZMK_HOLD_TAP(lt_spc, bindings = <&mo>, <&spc_morph>; flavor = "balanced";
             tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)

SIMPLE_MORPH(spc_morph, SFT, &kp SPACE, &dot_spc)
ZMK_MACRO(dot_spc, bindings = <&kp DOT &kp SPACE &sk LSHFT>; wait-ms = <0>;
          tap-ms = <5>;)

// Tap: backspace | Lshft + tap: delete | Rshft + tap: shift-delete.
ZMK_MOD_MORPH(bs_del, bindings = <&kp BSPC>, <&kp DEL>;
              mods = <(MOD_LSFT|MOD_RSFT)>; keep-mods = <MOD_RSFT>;)

// Tap: copy | double-tap: cut.
ZMK_TAP_DANCE(copy_cut, bindings = <&kp LC(INS)>, <&kp LC(X)>;
              tapping-term-ms = <200>;)


&soft_off { hold-time-ms = <2000>; };

/* Shift/Caps Tap-Dance */
ZMK_TAP_DANCE(td0, bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
              tapping-term-ms = <200>;)

ZMK_TAP_DANCE(tap_ct, bindings = <&kp LCTRL>, <&kp LEFT_ALT>;
              tapping-term-ms = <200>;)

ZMK_TAP_DANCE(tap_mu, bindings = <&kp C_NEXT>, <&kp C_PREV>;
              tapping-term-ms = <200>;)

ZMK_TAP_DANCE(deae, bindings = <&kp SQT>, <&kp LS(SQT)>;
              tapping-term-ms = <200>;)

ZMK_TAP_DANCE(deoe, bindings = <&kp SEMI>, <&kp LS(SEMI)>;
              tapping-term-ms = <200>;)

ZMK_TAP_DANCE(deue, bindings = <&kp LBKT>, <&kp LS(LBKT)>;
              tapping-term-ms = <200>;)

ZMK_TAP_DANCE(desz, bindings = <&kp MINUS>, <&macro_SS>;
              tapping-term-ms = <200>;)

/* SS */
ZMK_MACRO(macro_SS, bindings = <&kp LS(S) &kp LS(S)>; wait-ms = <0>;
          tap-ms = <5>;)
/* || */
ZMK_MACRO(or_comp, bindings = <&kp RA(NUBS) &kp RA(NUBS)>; wait-ms = <0>;
          tap-ms = <5>;)
/* ?? */
ZMK_MACRO(nullish_comp, bindings = <&kp LS(MINUS) &kp LS(MINUS)>; wait-ms = <0>;
          tap-ms = <5>;)
/* === */
ZMK_MACRO(strict_equal, bindings = <&kp LS(N0) &kp LS(N0) &kp LS(N0)>; wait-ms = <0>;
          tap-ms = <5>;)
/* !== */
ZMK_MACRO(strict_unequal, bindings = <&kp LS(N1) &kp LS(N0) &kp LS(N0)>; wait-ms = <0>;
          tap-ms = <5>;)
/* => */
ZMK_MACRO(arrow_func, bindings = <&kp LS(N0) &kp LS(NUBS)>; wait-ms = <0>;
          tap-ms = <5>;)

/* -> */
ZMK_MACRO(arrow_thin, bindings = <&kp FSLH &kp LS(NUBS)>; wait-ms = <0>;
          tap-ms = <5>;)
/* :: */
ZMK_MACRO(scope_sep, bindings = <&kp LS(DOT) &kp LS(DOT)>; wait-ms = <0>;
          tap-ms = <5>;)
/* Shift+´ , dann Space */
ZMK_MACRO(backtick_de, bindings = <&kp LS(EQUAL) &kp SPACE>; wait-ms = <0>;
          tap-ms = <5>;)
/* ~ */
ZMK_MACRO(tilde_de, bindings = <&kp RA(RBKT)>; wait-ms = <0>;
          tap-ms = <5>;)



/* Home-Row Mod (tap-preferred) – wie in deiner helper/dtsi 

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        }; */




    /* ───────────────────────── Encoder / Combos ───────────────────────── */

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };


    /* ───────────────────────────── Keymap ───────────────────────────── */

ZMK_CONDITIONAL_LAYER(sys, FN NUM, SYS) // FN + NUM --> SYS.

#ifndef ZMK_BASE_LAYER
  #define ZMK_BASE_LAYER(name, LT, RT, LM, RM, LB, RB, LH, RH, sensor)                 \
      ZMK_LAYER(name, LT RT LM RM LB RB LH RH, sensor)
#endif

ZMK_BASE_LAYER(Base,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                 ╭─────────────╮                  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &kp TAB       &kp Q         &kp W         &kp F         &kp P         &kp B       ,                                   R_COL_W                          &kp J         &kp L         &kp U         &kp Y         &kp SQT       &deae       ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                   ╭─────────────┼─────────────┼─────────────╮    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &kp ESC       &hml LGUI A   &hml LALT R   &hml LSHFT S  &hml LCTRL T  &kp G       ,                     R_BR_I        R_TOG         R_BR_D             &kp M         &hmr LCTRL N  &hmr RSHFT E  &hmr LALT I   &hmr LGUI O   &deoe       ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼ ╭─────────────╮   ╰─────────────┼─────────────┼─────────────╯    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &desz         &kp Z         &kp X         &kp C         &kp D         &kp V           &kp SPACE   ,                   R_COL_G                          &kp K         &kp H         &comma_morph  &dot_morph    &qexcl        &deue       ,
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┼ ╰─────────────╯                 ╰─────────────╯                  ├─────────────┼─────────────┼─────────────┴─────────────────────────────────────────╯
                                              &kp LSHFT     &lt_spc NAV 0 &lt FN RET  ,                                                                    SMART_NUM     MAGIC_SHIFT   &kp RSHFT   ,
//                                          ╰─────────────┴─────────────┴─────────────╯                                                                  ╰─────────────┴─────────────┴─────────────╯
    sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>
)

ZMK_BASE_LAYER(Coding,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                 ╭─────────────╮                  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &kp RA(N8)    &kp RA(N7)    &kp LS(N8)    &kp LS(N9)    &kp RA(N0)    &kp RA(N9)  ,                                   K_BT_N                           &kp NUBS      &kp LS(NUBS)  &kp LS(N0)    &kp RBKT      &tilde_de     &backtick_de,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                   ╭─────────────┼─────────────┼─────────────╮    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &kp LS(N1)    &kp FSLH      &kp LS(RBKT)  &kp LS(N7)    &kp RA(MINUS) &kp RA(NUBS),                     WIN_PC        &studio_unlock MAC_WORK          &kp LS(N6)    &kp GRAVE     &kp LS(DOT)   &kp LS(COMMA) &kp LS(MINUS) &kp RA(Q)   ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼ ╭─────────────╮   ╰─────────────┼─────────────┼─────────────╯    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &kp LS(FSLH)  &kp BSLH      &kp LS(BSLH)  &kp LS(N2)    &kp COMMA     &kp DOT         &kp SPACE   ,                   K_BT_P                           &kp LS(N4)    &kp LS(N5)    &arrow_func   &kp RA(MINUS) &strict_equal &strict_unequal, 
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┼ ╰─────────────╯                 ╰─────────────╯                  ├─────────────┼─────────────┼─────────────┴─────────────────────────────────────────╯
                                              ___           ___           ___         ,                                                                     ___           ___           ___        ,
//                                          ╰─────────────┴─────────────┴─────────────╯                                                                  ╰─────────────┴─────────────┴─────────────╯
    sensor-bindings = <&scroll_encoder>

)

ZMK_BASE_LAYER(Number,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                 ╭─────────────╮                  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    XXX           XXX           &kp LC(LEFT)  &kp LS(UP)    &kp LC(RIGHT) XXX         ,                                   U_MS_U                           XXX           &kp N7        &kp N8        &kp N9        &kp BACKSPACE XXX         ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                   ╭─────────────┼─────────────┼─────────────╮    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX           XXX           &kp LS(LEFT)  &kp LS(DOWN)  &kp LS(RIGHT) XXX         ,                     U_MS_L        &mkp LCLK     U_MS_R             &kp N0        &kp N4        &kp N5        &kp N6        &kp TAB       XXX         ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼ ╭─────────────╮   ╰─────────────┼─────────────┼─────────────╯    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    XXX           XXX           XXX           XXX           XXX           XXX             &kp SPACE   ,                   U_MS_D                           &kp DOT       &kp N1        &kp N2        &kp N3        &kp LS(TAB)   XXX         , 
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┼ ╰─────────────╯                 ╰─────────────╯                  ├─────────────┼─────────────┼─────────────┴─────────────────────────────────────────╯
                                              ___           ___           ___         ,                                                                     ___           ___           ___        ,
//                                          ╰─────────────┴─────────────┴─────────────╯                                                                  ╰─────────────┴─────────────┴─────────────╯
    sensor-bindings = <&scroll_encoder>

)

ZMK_BASE_LAYER(Symbol,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                 ╭─────────────╮                  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &kp ESC       &kp HOME      &kp UP        &kp END       &kp PG_UP     &kp CAPS    ,                                   U_MS_U                           &kp F1        &kp F2        &kp F3        &kp F4        &kp F5        &kp F6      ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                   ╭─────────────┼─────────────┼─────────────╮    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &kp TAB       &kp LEFT      &kp DOWN      &kp RIGHT     &kp PG_DN     &kp INS     ,                     U_MS_L        &mkp LCLK     U_MS_R             &kp F7        &kp F8        &kp F9        &kp F10       &kp F11       &kp F12     ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼ ╭─────────────╮   ╰─────────────┼─────────────┼─────────────╯    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &kp LCTRL     &kp LGUI      &kp LALT      &kp LSHFT     &kp LC(LEFT)  &kp LC(RIGHT)    &kp SPACE  ,                   U_MS_D                           &kp LS(LEFT)  &kp LS(DOWN)  &kp LS(UP)    &kp LS(RIGHT) &kp DEL       XXX         , 
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┼ ╰─────────────╯                 ╰─────────────╯                  ├─────────────┼─────────────┼─────────────┴─────────────────────────────────────────╯
                                              ___           ___           ___         ,                                                                     ___           ___           ___        ,
//                                          ╰─────────────┴─────────────┴─────────────╯                                                                  ╰─────────────┴─────────────┴─────────────╯
    sensor-bindings = <&scroll_encoder>

)

ZMK_BASE_LAYER(Sys,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                 ╭─────────────╮                  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_NXT  ,                                   U_MS_U                           &bt BT_PRV    &bt BT_CLR    &bt BT_CLR_ALL &out OUT_USB &out OUT_BLE  &out OUT_TOG,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                   ╭─────────────┼─────────────┼─────────────╮    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    R_TOG         R_HUE_I       R_HUE_D       R_SAT_I       R_SAT_D       R_EF_F      ,                     U_MS_L        &mkp LCLK     U_MS_R             R_BR_I        R_BR_D        R_SPE_I       R_SPE_D       XXX           XXX         ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼ ╭─────────────╮   ╰─────────────┼─────────────┼─────────────╯    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    &bl BL_TOG    &bl BL_INC    &bl BL_DEC    &bl BL_CYCLE  &bl BL_SET 50 &bl BL_OFF       &kp SPACE  ,                   U_MS_D                           &bootloader   &studio_unlock XXX          XXX           XXX           XXX         , 
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┼ ╰─────────────╯                 ╰─────────────╯                  ├─────────────┼─────────────┼─────────────┴─────────────────────────────────────────╯
                                              ___           ___           ___         ,                                                                     ___           ___           ___        ,
//                                          ╰─────────────┴─────────────┴─────────────╯                                                                  ╰─────────────┴─────────────┴─────────────╯
    sensor-bindings = <&scroll_encoder>

)


ZMK_BASE_LAYER(Mouse,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮                                 ╭─────────────╮                  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    ___           ___           ___           ___           ___           ___         ,                                   U_MS_U                           ___           &kp PG_UP     U_MS_U         &kp PG_DN    ___           ___         ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤                   ╭─────────────┼─────────────┼─────────────╮    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    ___           ___           ___           ___           ___           ___         ,                     U_MS_L        &mkp LCLK     U_MS_R             U_WH_L        U_MS_L        U_MS_D         U_MS_R       U_WH_R        ___         ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ╭─────────────╮   ╰─────────────┼─────────────┼─────────────╯    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    ___           ___           ___           ___           ___           ___              &kp SPACE  ,                   U_MS_D                           ___           &mkp LCLK     &mkp MCLK      &mkp RCLK    ___           ___         ,
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ╰─────────────╯                 ╰─────────────╯                  ├─────────────┼─────────────┼─────────────┴─────────────────────────────────────────╯
                                              ___           ___           ___         ,                                                                    U_WH_U        U_WH_D        XXX         ,
//                                          ╰─────────────┴─────────────┴─────────────╯                                                                  ╰─────────────┴─────────────┴─────────────╯
    sensor-bindings = <&scroll_encoder>
)
};
